# Importing Liabraries

# for data manipulation

import numpy as np
import pandas as pd


# for data visualization 

import matplotlib.pyplot as plt
import seaborn as sns

# for Fearure Extraction and Recommendation System

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# miscellaneous

import warnings
warnings.filterwarnings("ignore")

# Data Gathering

df = pd.read_csv(r"C:\Users\Dell\Downloads\store_zara.csv")
print(df.head())

# drop unnecessary columns

df.drop(["brand","url","currency","images","scraped_at","error","image_downloads"],axis=1,inplace=True)

print(df)

# Exploratory Data Analysis

# basic information

print(df.shape)

print(df.columns)

print(df["terms"].unique())

# overall data information

print(df.info())

# statistical information

df.describe().T                                            # because only one numerical columns pressent

# check for missing values

print(df.isna().sum())

df = df.dropna()

print(df.isna().sum())

# Data Visualization

# Histogram of 'price'
plt.figure(figsize=(5, 4))
sns.histplot(df["price"], bins=20, kde=True,color='blue')
plt.title("Distribution of Prices")
plt.xlabel("Price")
plt.ylabel("Frequency")
plt.show()

# The above histplot illustrates that over 1500 products are priced within the range of 0-200 USD.


# Assuming 'section' column contains the section information
section_distribution = df['section'].value_counts()

# Plotting the distribution
plt.figure(figsize=(5, 4))
section_distribution.plot(kind='bar', color='blue')
plt.title('Section Distribution Products')
plt.xlabel('Section')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# This plot indicates that there are more products available in the women's section compared to the men's section.


# Assuming 'section' column contains the section information
term_distribution = df['terms'].value_counts()

# Plotting the distribution
plt.figure(figsize=(5, 4))
term_distribution.plot(kind='bar', color='blue')
plt.title('Terms Distribution Products')
plt.xlabel('terms')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# The plot illustrates a notable level of demand for terms associated with both tops and shoes.


# Feature Engineering

# convert numerical values to string for count vectorization

df['price'] = df['price'].astype(str)

# creating new column considered for recomendation 
# we are recomending "SKU" on the basis of ("name","description","price","terms","section")

df["features"] = df["name"]+df["description"]+df["price"]+df["terms"]+df["section"]

print(df.head())

# Feature Extraction

cv = CountVectorizer(max_features=5000,stop_words="english")

cv.fit_transform(df['features']).toarray().shape

vectors = cv.fit_transform(df['features']).toarray()

print(vectors[0])

print(len(cv.get_feature_names_out()))

# Apply cosine similarity

print(cosine_similarity(vectors).shape)

similarity = cosine_similarity(vectors)                        # so we dont have to write above full line of code

print(similarity[0])

print(similarity[0].shape)

print(sorted(list(enumerate(similarity[0])), reverse=True, key=lambda x:x[1])[1:6])